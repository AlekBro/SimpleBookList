@using SimpleBookList.Models;
@model BookViewModel
@using System;
@using System.Collections.Generic;

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<div class="form-group">
    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextBoxFor(model => model.ReleaseDate, "{0:MM/dd/yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Pages, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextBoxFor(model => model.Pages, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Pages, "", new { @class = "text-danger" })
    </div>
</div>

@{
    var ratingList = new SelectList(
        new List<SelectListItem>
        {
            new SelectListItem {Text = "0", Value = "0"},
            new SelectListItem {Text = "1", Value = "1"},
            new SelectListItem {Text = "2", Value = "2"},
            new SelectListItem {Text = "3", Value = "3"},
            new SelectListItem {Text = "4", Value = "4"},
            new SelectListItem {Text = "5", Value = "5"},
            new SelectListItem {Text = "6", Value = "6"},
            new SelectListItem {Text = "7", Value = "7"},
            new SelectListItem {Text = "8", Value = "8"},
            new SelectListItem {Text = "9", Value = "9"},
            new SelectListItem {Text = "10", Value = "10"},
        }, "Value", "Text");
}

<div class="form-group">
    @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.Rating, ratingList, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Authors, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">

        @Html.DropDownList("AuthorsIds",
                    ViewBag.AuthorsList as MultiSelectList,
                    new
                    {
                        multiple = "multiple",
                        @class = "searchableMultiselect"
                    })

        @Html.ValidationMessageFor(model => model.Authors, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Submit" class="btn btn-default" />
        <input type="button" value="Cancel" class="btn btn-default" id="CancelButton" />
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.searchableMultiselect').multiSelect({
            selectableHeader: "<input type='text' class='search-input' autocomplete='off' placeholder='try \"12\"'>",
            selectionHeader: "<input type='text' class='search-input' autocomplete='off' placeholder='try \"4\"'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                .on('keydown', function (e) {
                    if (e.which === 40) {
                        that.$selectableUl.focus();
                        return false;
                    }
                });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                .on('keydown', function (e) {
                    if (e.which == 40) {
                        that.$selectionUl.focus();
                        return false;
                    }
                });
            },
            afterSelect: function () {
                this.qs1.cache();
                this.qs2.cache();
            },
            afterDeselect: function () {
                this.qs1.cache();
                this.qs2.cache();
            }
        });

    });
</script>